// cach 1
// O(n^2)

int pairs(int k, vector<int> arr) {
    sort(arr.begin(), arr.end());

    int result = 0;

    for(int i = 0; i < arr.size(); i++) {
        for(int j = i+1; j < arr.size(); j++) {
            if(arr[j] - arr[i] == k){
                result++;
            }
            if(arr[j] - arr[i] > k){
                break;
            }
        }
    }

    return result;
}

// cach 2
// O(n*logn)

bool timKiemNhiPhan (vector<int> a, int l, int r, int x){
    if(l>r){
        return false;
    }

    int m = (l+r)/2;

    if(a[m] == x){
        return true;
    }else if(a[m] < x){
        return timKiemNhiPhan(a, m+1, r, x);
    }else{
        return timKiemNhiPhan(a, l, m-1, x);
    }
}

int pairs(int k, vector<int> arr) {
    sort(arr.begin(), arr.end());
    int count = 0;
    for(int i=0; i<arr.size(); i++) {
        if(timKiemNhiPhan(arr, i+1, arr.size()-1, arr[i]+k)){
            count++;
        }
    }

    return count;
}

